document.addEventListener('DOMContentLoaded', function () {

    /**
     * 
     *  Stepper Default
     * 
     */

     var stepperWizardDefault = document.querySelector('.stepper-form-one');
     var stepperDefault = new Stepper(stepperWizardDefault, {
         animation: true
     })
     var stepperNextButtonDefault = stepperWizardDefault.querySelectorAll('.btn-nxt');
     var stepperPrevButtonDefault = stepperWizardDefault.querySelectorAll('.btn-prev');
 
     stepperNextButtonDefault.forEach(element => {
         element.addEventListener('click', function() {
             stepperDefault.next();
         })
     });
 
     stepperPrevButtonDefault.forEach(element => {
         element.addEventListener('click', function() {
             stepperDefault.previous();
         })
     });
 
     stepperWizardDefault.addEventListener('show.bs-stepper', function (event) {
         if (event.detail.from < event.detail.to) {
             stepperWizardDefault.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
         } else {
             stepperWizardDefault.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
         }
     })


     /**
      * 
      *  Vertical Default
      * 
      */
 
     var v_stepperWizardDefault = document.querySelector('.stepper-form-vertical');
     var v_stepperDefault = new Stepper(v_stepperWizardDefault, {
         animation: true
     })
     var v_stepperNextButtonDefault = v_stepperWizardDefault.querySelectorAll('.btn-nxt');
     var v_stepperPrevButtonDefault = v_stepperWizardDefault.querySelectorAll('.btn-prev');
 
     v_stepperNextButtonDefault.forEach(element => {
         element.addEventListener('click', function() {
             v_stepperDefault.next();
         })
     });
 
     v_stepperPrevButtonDefault.forEach(element => {
         element.addEventListener('click', function() {
             v_stepperDefault.previous();
         })
     });
 
     v_stepperWizardDefault.addEventListener('show.bs-stepper', function (event) {
         if (event.detail.from < event.detail.to) {
             v_stepperWizardDefault.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
         } else {
             v_stepperWizardDefault.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
         }
     })
    

    /**
     * 
     *  Stepper Icon
     * 
     */

    var stepperWizardIcon = document.querySelector('.stepper-icons');
    var stepperIcon = new Stepper(stepperWizardIcon, {
        animation: true
    })
    var stepperNextButtonIcon = stepperWizardIcon.querySelectorAll('.btn-nxt');
    var stepperPrevButtonIcon = stepperWizardIcon.querySelectorAll('.btn-prev');

    stepperNextButtonIcon.forEach(element => {
        element.addEventListener('click', function() {
            stepperIcon.next();
        })
    });

    stepperPrevButtonIcon.forEach(element => {
        element.addEventListener('click', function() {
            stepperIcon.previous();
        })
    });

    stepperWizardIcon.addEventListener('show.bs-stepper', function (event) {
        if (event.detail.from < event.detail.to) {
            stepperWizardIcon.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
        } else {
            stepperWizardIcon.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
        }
    })


    /**
     * 
     *  Vertical Icons
     * 
     */

    var v_stepperWizardIcon = document.querySelector('.stepper-vertical-icons');
    var v_stepperIcon = new Stepper(v_stepperWizardIcon, {
        animation: true
    })
    var v_stepperNextButtonIcon = v_stepperWizardIcon.querySelectorAll('.btn-nxt');
    var v_stepperPrevButtonIcon = v_stepperWizardIcon.querySelectorAll('.btn-prev');

    v_stepperNextButtonIcon.forEach(element => {
        element.addEventListener('click', function() {
            v_stepperIcon.next();
        })
    });

    v_stepperPrevButtonIcon.forEach(element => {
        element.addEventListener('click', function() {
            v_stepperIcon.previous();
        })
    });

    v_stepperWizardIcon.addEventListener('show.bs-stepper', function (event) {
        if (event.detail.from < event.detail.to) {
            v_stepperWizardIcon.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
        } else {
            v_stepperWizardIcon.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
        }
    })


    /**
     * 
     *  Validation Horizontal  
     * 
     */

    var formValidation = document.querySelector('.stepper-form-validation-one');
    var stepper = new Stepper(formValidation, {
        animation: true
    })
    var formValidationNextButton = formValidation.querySelectorAll('.btn-nxt');
    var formValidationPrevButton = formValidation.querySelectorAll('.btn-prev');
    var formValidationSubmit = formValidation.querySelector('.btn-submit');
    var stepperPanList = [].slice.call(formValidation.querySelectorAll('.content'))
    var inputName = formValidation.querySelector('#form-name');
    var inputEmail = formValidation.querySelector('#emailAddress');

    var inputAddress = formValidation.querySelector('#inputAddress');
    var inputCity = formValidation.querySelector('#inputCity');
    var inputState = formValidation.querySelector('#inputState');
    var inputZip = formValidation.querySelector('#inputZip');
    var gridCheck = formValidation.querySelector('#gridCheck');

    var formEl = formValidation.querySelector('.bs-stepper-content form')

    formValidationNextButton.forEach(element => {
        element.addEventListener('click', function() {
            var currentStepId = formValidation.querySelector('.content.active').id;
            var isValid = true;
            var formData = new FormData();

            // Collect data based on the current step
            if (currentStepId === 'validationStep-one') {
                var firstName = document.getElementById('user-firstname');
                var lastName = document.getElementById('user-lastname');
                var middleName = document.getElementById('user-middlename');
                var suffix = document.getElementById('user-suffix');
                var tupId = document.getElementById('user-tupid');

                if (!firstName.value) { firstName.classList.add('is-invalid'); isValid = false; } else { firstName.classList.remove('is-invalid'); }
                if (!lastName.value) { lastName.classList.add('is-invalid'); isValid = false; } else { lastName.classList.remove('is-invalid'); }
                if (!middleName.value) { middleName.classList.add('is-invalid'); isValid = false; } else { middleName.classList.remove('is-invalid'); }
                if (!tupId.value) { tupId.classList.add('is-invalid'); isValid = false; } else { tupId.classList.remove('is-invalid'); }

                if (isValid) {
                    stepper.next();
                }

            } else if (currentStepId === 'validationStep-two') {
                var email = document.getElementById('user-tup-email');
                var password = document.getElementById('user-password');
                var confirmPassword = document.getElementById('confirm-password');
                var userTypeFaculty = document.getElementById('user-type-faculty');
                var userTypeStaff = document.getElementById('user-type-staff');
                var userTypeFeedback = document.getElementById('user-type-feedback');

                // Basic validation for Step 2
                if (!email.value) { email.classList.add('is-invalid'); isValid = false; } else { email.classList.remove('is-invalid'); }
                if (!password.value) { password.classList.add('is-invalid'); isValid = false; } else { password.classList.remove('is-invalid'); }
                if (!confirmPassword.value) { confirmPassword.classList.add('is-invalid'); isValid = false; } else { confirmPassword.classList.remove('is-invalid'); }

                if (password.value !== confirmPassword.value) {
                    password.classList.add('is-invalid');
                    confirmPassword.classList.add('is-invalid');
                    isValid = false;
                } else {
                    password.classList.remove('is-invalid');
                    confirmPassword.classList.remove('is-invalid');
                }

                var selectedUserType = '';
                if (userTypeFaculty.checked) {
                    selectedUserType = userTypeFaculty.value;
                    userTypeFeedback.style.display = 'none';
                } else if (userTypeStaff.checked) {
                    selectedUserType = userTypeStaff.value;
                    userTypeFeedback.style.display = 'none';
                } else {
                    userTypeFeedback.style.display = 'block';
                    userTypeFeedback.textContent = 'Please select a user type.';
                    isValid = false;
                }

                if (isValid) {
                    // Collect all data from both steps
                    formData.append('user_firstname', document.getElementById('user-firstname').value);
                    formData.append('user_lastname', document.getElementById('user-lastname').value);
                    formData.append('user_middlename', document.getElementById('user-middlename').value);
                    formData.append('user_suffix', document.getElementById('user-suffix').value);
                    formData.append('user_tupid', document.getElementById('user-tupid').value);
                    formData.append('user_email', email.value);
                    formData.append('user_password', password.value);
                    formData.append('confirm_password', confirmPassword.value);
                    formData.append('user_type', selectedUserType);

                    fetch(`<?= base_url('auth/register'); ?>`, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            // Populate review step and advance
                            document.getElementById('review-firstname').textContent = formData.get('user_firstname');
                            document.getElementById('review-middlename').textContent = formData.get('user_middlename');
                            document.getElementById('review-lastname').textContent = formData.get('user_lastname');
                            document.getElementById('review-suffix').textContent = formData.get('user_suffix');
                            document.getElementById('review-tupid').textContent = formData.get('user_tupid');
                            document.getElementById('review-email').textContent = formData.get('user_email');
                            document.getElementById('review-user-type').textContent = formData.get('user_type');
                            
                            // Display email in modal
                            document.getElementById('modal-email-display').textContent = formData.get('user_email');
                            stepper.next(); // Advance to review
                        } else {
                            // Display validation errors
                            if (data.validation) {
                                for (const field in data.validation) {
                                    var inputElement = document.getElementById(field.replace('user_', 'user-').replace('_password', '-password').replace('tup_id', 'tupid').replace('email', 'tup-email'));
                                    if (inputElement) {
                                        inputElement.classList.add('is-invalid');
                                        var feedbackElement = inputElement.nextElementSibling; // Assuming invalid-feedback is next
                                        if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                                            feedbackElement.textContent = data.validation[field];
                                        }
                                    } else if (field === 'user_type') {
                                        userTypeFeedback.style.display = 'block';
                                        userTypeFeedback.textContent = data.validation[field];
                                    }
                                }
                            }
                            Swal.fire({
                                icon: 'error',
                                title: 'Registration Failed',
                                text: data.message
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again.'
                        });
                    });
                }
            } else if (currentStepId === 'validationStep-three') { // From Review to OTP Verification (Step 4)
                $('#otpConfirmationModal').modal('show'); // Show the OTP confirmation modal
            } else {
                stepper.next();
            }
        });
    });

    formValidationPrevButton.forEach(element => {
        element.addEventListener('click', function() {
            stepper.previous();
        })
    });

    formValidation.addEventListener('show.bs-stepper', function (event) {
        formEl.classList.remove('was-validated')
        var nextStep = event.detail.indexStep
        var currentStep = nextStep
    
        if (currentStep > 0) {
          currentStep--
        }
        
        var stepperPan = stepperPanList[currentStep]

        if (
            (stepperPan.getAttribute('id') === 'step-one' && !inputName.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-two' && !inputEmail.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputAddress.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputCity.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputState.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputZip.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !gridCheck.value.length)
        ) {
            event.preventDefault()
            formEl.classList.add('was-validated')
        } else {
            if (event.detail.from < event.detail.to) {
                formValidation.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
            } else {
                formValidation.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
            }
        }
    })

    formValidationSubmit.addEventListener('click', function() {
        formEl.classList.remove('was-validated')

        if (
            (!inputAddress.value.length)
            ||
            (!inputCity.value.length)
            ||
            (!inputState.value.length)
            ||
            (!inputZip.value.length)
            ||
            (!gridCheck.value.length)
        ) {
            formEl.classList.add('was-validated')
        }
    })


    /**
     * 
     *  Validation Vertical  
     * 
     */

     var formValidationVertical = document.querySelector('.stepper-form-validation-vertical');
     var v_stepper = new Stepper(formValidationVertical, {
         animation: true
     })
     var v_formValidationVerticalNextButton = formValidationVertical.querySelectorAll('.btn-nxt');
     var v_formValidationVerticalPrevButton = formValidationVertical.querySelectorAll('.btn-prev');
     var v_formValidationVerticalSubmit = formValidationVertical.querySelector('.btn-submit');
     var v_stepperPanList = [].slice.call(formValidationVertical.querySelectorAll('.content'))
     var v_inputName = formValidationVertical.querySelector('#form-name');
     var v_inputEmail = formValidationVertical.querySelector('#emailAddress');
 
     var v_inputAddress = formValidationVertical.querySelector('#inputAddress');
     var v_inputCity = formValidationVertical.querySelector('#inputCity');
     var v_inputState = formValidationVertical.querySelector('#inputState');
     var v_inputZip = formValidationVertical.querySelector('#inputZip');
     var v_gridCheck = formValidationVertical.querySelector('#gridCheck');
 
     var v_formEl = formValidationVertical.querySelector('.bs-stepper-content form')
 
     v_formValidationVerticalNextButton.forEach(element => {
         element.addEventListener('click', function() {
             v_stepper.next();
         })
     });
 
     v_formValidationVerticalPrevButton.forEach(element => {
         element.addEventListener('click', function() {
             v_stepper.previous();
         })
     });
 
     formValidationVertical.addEventListener('show.bs-stepper', function (event) {
         v_formEl.classList.remove('was-validated')
         var v_nextStep = event.detail.indexStep
         var v_currentStep = v_nextStep
     
         if (v_currentStep > 0) {
           v_currentStep--
         }
         
         var v_stepperPan = v_stepperPanList[v_currentStep]
 
         if (
             (v_stepperPan.getAttribute('id') === 'step-one' && !v_inputName.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-two' && !v_inputEmail.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-three' && !v_inputAddress.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-three' && !v_inputCity.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-three' && !v_inputState.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-three' && !v_inputZip.value.length)
             ||
             (v_stepperPan.getAttribute('id') === 'step-three' && !v_gridCheck.value.length)
         ) {
             event.preventDefault()
             v_formEl.classList.add('was-validated')
         } else {
            if (event.detail.from < event.detail.to) {
                formValidationVertical.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
            } else {
                formValidationVertical.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
            }
        }
         
     })
 
     v_formValidationVerticalSubmit.addEventListener('click', function() {
         v_formEl.classList.remove('was-validated')
 
         if (
             (!v_inputAddress.value.length)
             ||
             (!v_inputCity.value.length)
             ||
             (!v_inputState.value.length)
             ||
             (!v_inputZip.value.length)
             ||
             (!v_gridCheck.value.length)
         ) {
             v_formEl.classList.add('was-validated')
         }
     })

    // Handle OTP confirmation and sending
    var proceedToOtpBtn = document.getElementById('proceedToOtpBtn');
    if (proceedToOtpBtn) {
        proceedToOtpBtn.addEventListener('click', function() {
            $('#otpConfirmationModal').modal('hide'); // Hide the modal

            // Call the sendOtp function
            fetch(`<?= base_url('auth/sendOtp'); ?>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({}) // No data needed, email is from session
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Sent!',
                        text: data.message
                    });
                    stepper.next(); // Advance to OTP verification step
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Send OTP',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred while sending OTP. Please try again.'
                });
            });
        });
    }

    // Handle OTP verification
    var verifyOtpBtn = document.getElementById('verifyOtpBtn');
    if (verifyOtpBtn) {
        verifyOtpBtn.addEventListener('click', function() {
            var otpCode = document.getElementById('otp-code').value;

            fetch(`<?= base_url('auth/verifyOtp'); ?>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ otp: otpCode })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Verified!',
                        text: data.message + ' You can now log in.',
                        showConfirmButton: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = `<?= base_url('auth/login'); ?>`; // Redirect to login
                        }
                    });
                    // stepper.next(); // No longer needed as we redirect or show alert
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Verification Failed',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred during OTP verification. Please try again.'
                });
            });
        });
    }

    // Handle resend OTP
    var resendOtpBtn = document.getElementById('resendOtpBtn');
    if (resendOtpBtn) {
        resendOtpBtn.addEventListener('click', function() {
            fetch(`<?= base_url('auth/resendOtp'); ?>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({}) // No data needed, email is from session
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent!',
                        text: data.message
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Resend OTP',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred while resending OTP. Please try again.'
                });
            });
        });
    }
})