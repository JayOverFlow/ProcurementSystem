document.addEventListener('DOMContentLoaded', function () {

    /**
     * 
     *  Validation Horizontal  
     * 
     */

    var formValidation = document.querySelector('.stepper-form-validation-one');
    var stepper = new Stepper(formValidation, {
        animation: true
    })
    var formValidationNextButton = formValidation.querySelectorAll('.btn-nxt');
    var formValidationPrevButton = formValidation.querySelectorAll('.btn-prev');
    var formValidationSubmit = formValidation.querySelector('.btn-submit');
    var stepperPanList = [].slice.call(formValidation.querySelectorAll('.content'))
    var inputName = formValidation.querySelector('#form-name');
    var inputEmail = formValidation.querySelector('#emailAddress');

    var inputAddress = formValidation.querySelector('#inputAddress');
    var inputCity = formValidation.querySelector('#inputCity');
    var inputState = formValidation.querySelector('#inputState');
    var inputZip = formValidation.querySelector('#inputZip');
    var gridCheck = formValidation.querySelector('#gridCheck');

    var formEl = formValidation.querySelector('.bs-stepper-content form')

    formValidationNextButton.forEach(element => {
        element.addEventListener('click', function() {
            stepper.next();
        })
    });

    formValidationPrevButton.forEach(element => {
        element.addEventListener('click', function() {
            stepper.previous();
        })
    });

    formValidation.addEventListener('show.bs-stepper', function (event) {
        formEl.classList.remove('was-validated')
        var nextStep = event.detail.indexStep
        var currentStep = nextStep
    
        if (currentStep > 0) {
          currentStep--
        }
        
        var stepperPan = stepperPanList[currentStep]

        if (
            (stepperPan.getAttribute('id') === 'step-one' && !inputName.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-two' && !inputEmail.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputAddress.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputCity.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputState.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !inputZip.value.length)
            ||
            (stepperPan.getAttribute('id') === 'step-three' && !gridCheck.value.length)
        ) {
            event.preventDefault()
            formEl.classList.add('was-validated')
        } else {
            if (event.detail.from < event.detail.to) {
                formValidation.querySelectorAll('.step')[event.detail.from].classList.add('crossed');
            } else {
                formValidation.querySelectorAll('.step')[event.detail.to].classList.remove('crossed');
            }
        }
    })

    formValidationSubmit.addEventListener('click', function() {
        formEl.classList.remove('was-validated')

        if (
            (!inputAddress.value.length)
            ||
            (!inputCity.value.length)
            ||
            (!inputState.value.length)
            ||
            (!inputZip.value.length)
            ||
            (!gridCheck.value.length)
        ) {
            formEl.classList.add('was-validated')
        }
    })

})